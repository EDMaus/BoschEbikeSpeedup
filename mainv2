/*
 Hardware:
 - Arduino Nano (Compatible board)
 Optional:
 -
 Software:
 - Arduino 1.8.10
 Arduino Pin Mapping:
 - 00 = Serial RX USB Serial
 - 01 = Serial TX USB Serial
 - 02 = Pulse Receiver ( connect to the speed wire)
 - 03 = Pulse Send ( connect to the engine)
 
*/

// Definitions
#define PULSE_PIN        2  // Button
#define RELAY_PIN        3  // Button
#define DELAY            5  // Delay per loop in ms


boolean pulse_was_generated; // previous state
boolean raising_edge;

// timer settings
unsigned long startTime;
unsigned long endTime;
unsigned long duration;
byte timerRunning;

//Bike State
byte resState;

void setup()
{
  pinMode(PULSE_PIN, INPUT);
  digitalWrite(PULSE_PIN, HIGH); // pull-up
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW); // pull-down
  Serial.begin(115200);
  pulse_was_generated = false;
  Serial.println ("startup");
}
 


void loop()
{
     sw = millis();
     sw.Start();

     long lastInputPulseAt = 0;
     long inputPulsePeriod = long.MaxValue;
     long nextOutputPulseAt = long.MaxValue;
     
     bool firstPulse = true;
     
     while (true)
     {
          var millis = sw.ElapsedMilliseconds;
          
          if (HandlePulse())
          {
                Console.WriteLine("IN");
                
                var currentInputPulseAt = millis;
                inputPulsePeriod = currentInputPulseAt - lastInputPulseAt;
                lastInputPulseAt = currentInputPulseAt;

                if (inputPulsePeriod > 250)
                {
                     Console.WriteLine("Going back to normal");
                     break;
                }

                // Ensure first pulse is passed immediately
                if (firstPulse)
                {
                     nextOutputPulseAt = millis;
                     firstPulse = false;
                }
          }
          
          if (millis >= nextOutputPulseAt)
          {
                Console.WriteLine("OUT");
                nextOutputPulseAt = millis + 250;
          }
          
          // May want to add a delay here (if needed)
     }
     
}

bool _pulsePrev = false;

public bool HandlePulse()
{
     bool result = false;
     bool pulseNow = IsPinLow();
     result = pulseNow && !_pulsePrev;
     _pulsePrev = pulseNow;
     return result;
}


public bool IsPinLow()
{
     var m = sw.ElapsedMilliseconds % 200; // assume input pulses every 1/5 sec
     return m >= 0 && m <= 50;
}
